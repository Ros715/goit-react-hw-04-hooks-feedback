{"version":3,"sources":["components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","title","children","className","styles","Statistics","good","neutral","bad","total","positivePercentage","statistics","Math","round","FeedbackOptions","options","onLeaveFeedback","map","opt","type","onClick","handleClick","name","id","Notification","message","notification","App","useState","setGood","setNeutral","setBad","countTotalFeedback","buttonsOptions","ev","countPositiveFeedbackPercentage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2IACAA,EAAOC,QAAU,CAAC,gBAAkB,oCAAoC,WAAa,iC,mBCArFD,EAAOC,QAAU,CAAC,MAAQ,yB,gBCA1BD,EAAOC,QAAU,CAAC,aAAe,qC,qICgBlBC,MAbf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrB,OACE,gCACE,mBAAGC,UAAWC,IAAOH,MAArB,SAA6BA,IAC7B,8BAAMC,Q,gBCyBCG,MA9Bf,YAAwE,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,QAASC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,mBAC/C,OACE,gCACE,oBAAGP,UAAWC,IAAOO,WAArB,mBACQ,+BAAOL,OAEf,oBAAGH,UAAWC,IAAOO,WAArB,sBACW,+BAAOJ,OAElB,oBAAGJ,UAAWC,IAAOO,WAArB,kBACO,+BAAOH,OAEd,oBAAGL,UAAWC,IAAOO,WAArB,oBACS,+BAAOF,OAEhB,oBAAGN,UAAWC,IAAOO,WAArB,gCACqB,iCAAOC,KAAKC,MAAMH,GAAlB,cCKZI,MAtBf,YAAwD,IAA7BC,EAA4B,EAA5BA,QAEzB,OAFqD,EAAnBC,gBAGhC,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAAqBC,KAAK,SAASC,QAASF,EAAIG,YAAhD,SACGH,EAAII,MADMJ,EAAIK,U,gBCIVC,MARf,YAAoC,IAAZC,EAAW,EAAXA,QACtB,OAAO,mBAAGtB,UAAWC,IAAOsB,aAArB,SAAoCD,KC0D9BE,MAtDf,WACE,MAAuBC,mBAAS,GAAhC,mBAAOtB,EAAP,KAAYuB,EAAZ,KACA,EAA6BD,mBAAS,GAAtC,mBAAOrB,EAAP,KAAeuB,EAAf,KACA,EAAqBF,mBAAS,GAA9B,mBAAOpB,EAAP,KAAWuB,EAAX,KAEMC,EAAqB,WACzB,OAAO1B,EAAOC,EAAUC,GAkBlByB,EAAiB,CACrB,CAAEV,GAAI,OAAQD,KAAM,OAAQD,YAXZ,SAACa,GACnBL,EAAQvB,EAAO,KAWb,CAAEiB,GAAI,OAAQD,KAAM,UAAWD,YATZ,SAACa,GACtBJ,EAAWvB,EAAU,KASnB,CAAEgB,GAAI,OAAQD,KAAM,MAAOD,YAPZ,SAACa,GAClBH,EAAOvB,EAAM,MASb,OACE,gCACE,cAAC,EAAD,CAASP,MAAM,wBACbC,SAAU,cAAC,EAAD,CAAiBa,QAASkB,MAEZ,IAAzBD,IACC,cAAC,EAAD,CAAcP,QAAQ,sBAEtB,cAAC,EAAD,CAASxB,MAAM,aACfC,SACE,cAAC,EAAD,CACEI,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOuB,IACPtB,mBApC4B,WACtC,IAAMD,EAAQuB,IACd,OAAOvB,EAAQ,EAAK,IAAMH,EAAQG,EAAQ,EAkCZ0B,WCzCnBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f27bfee5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statisticsTitle\":\"Statistics_statisticsTitle__2UpBe\",\"statistics\":\"Statistics_statistics__Wfy0L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__39Hnk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3S34P\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Section.module.css\";\r\n\r\nfunction Section({title, children}) {\r\n    return (\r\n      <div>\r\n        <p className={styles.title}>{title}</p>\r\n        <div>{children}</div>\r\n      </div>\r\n    );\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import styles from \"./Statistics.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Statistics({ good, neutral, bad, total, positivePercentage }) {\r\n  return (\r\n    <div>\r\n      <p className={styles.statistics}>\r\n        Good: <span>{good}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Neutral: <span>{neutral}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Bad: <span>{bad}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Total: <span>{total}</span>\r\n      </p>\r\n      <p className={styles.statistics}>\r\n        Positive feedback: <span>{Math.round(positivePercentage)}%</span>\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from \"prop-types\";\r\n\r\nfunction FeedbackOptions({ options, onLeaveFeedback }) {\r\n  //console.log(options);\r\n  return (\r\n    <div>\r\n      {options.map((opt) => (\r\n        <button key={opt.id} type=\"button\" onClick={opt.handleClick}>\r\n          {opt.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      handleClick: PropTypes.func.isRequired,\r\n    })\r\n  ),\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import styles from \"./Notification.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nfunction Notification({ message }) {\r\n  return <p className={styles.notification}>{message}</p>;\r\n}\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, {useState} from \"react\";\n//import PropTypes from \"prop-types\";\nimport Section from \"./components/Section/Section.js\";\nimport Statistics from \"./components/Statistics/Statistics.js\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions.js\";\nimport Notification from \"./components/Notification/Notification.js\";\n//import \"./App.css\";\n\nfunction App () {\n  const [good,setGood] = useState(0);\n  const [neutral,setNeutral] = useState(0);\n  const [bad,setBad] = useState(0);\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  }\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    return total > 0 ? (100 * good) / total : 0;\n  }\n\n  const onClickGood = (ev) => {\n    setGood(good + 1);\n  };\n  const onClickNeutral = (ev) => {\n    setNeutral(neutral + 1);\n  };\n  const onClickBad = (ev) => {\n    setBad(bad + 1);\n  };\n\n    const buttonsOptions = [\n      { id: \"id-1\", name: \"Good\", handleClick: onClickGood },\n      { id: \"id-2\", name: \"Neutral\", handleClick: onClickNeutral },\n      { id: \"id-3\", name: \"Bad\", handleClick: onClickBad },\n    ];\n\n    return (\n      <div>\n        <Section title=\"Please leave feedback\"\n          children={<FeedbackOptions options={buttonsOptions} />}>\n        </Section>\n        {countTotalFeedback() === 0 ? (\n          <Notification message=\"No feedback given\" />\n        ) : (\n          <Section title=\"Statistics\"\n          children={\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={countTotalFeedback()}\n              positivePercentage={countPositiveFeedbackPercentage()}\n            />\n          }>\n          </Section>\n        )}\n      </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}